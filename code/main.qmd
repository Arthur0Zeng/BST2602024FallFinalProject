---
title: Problem set 4
date: 2024-10-04
format: html
---

Import the necessary libraries. 
```{r}
library(httr2)
library(tidyverse)
library(janitor)
library(jsonlite)
library(purrr)
library(dplyr)
library(lubridate)

source("census_key.R")
```

Let us set up the environment. 

First, let us load in and clean population.
```{r}
url <- "https://api.census.gov/data/2021/pep/population"
request <- request(url) |> req_url_query(get = I("POP_2020,POP_2021,NAME"),
                                         'for' = I("state:*"),
                                         key = census_key)

response <- request |> req_perform()
resp_status(response)
resp_content_type(response)

population <- response |> resp_body_json(simplifyVector = TRUE)
population <- population |>
  row_to_names(1) |>
  as_tibble() |>
  select(-state) |>
  rename(state_name = NAME) 
# read estimated data from CENSUS
estpop <- read.csv(file = "../data/EstimatedPopulation.csv")

# joint estimated data with actual data
population <- population|> left_join(estpop, by = "state_name") |>
  mutate(across(-state_name, as.numeric)) |>
  pivot_longer(-state_name, names_to = "year", values_to = "population") |>
  mutate(year = str_remove(year, "POP_")) |>
  mutate(state = case_when(
    state_name == "District of Columbia" ~ "DC",
    state_name == "Puerto Rico" ~ "PR",
    TRUE ~ state.abb[match(state_name, state.name)]
  ))
head(population,2)
```

Next, let us load in regions. 
```{r}
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
dat <- fromJSON(url, simplifyDataFrame = FALSE)

regions <- map_df(dat, function(x) {
  region_name <- ifelse(x$region_name == "New York and New Jersey, Puerto Rico, Virgin Islands", 
                        "NY, NJ, PR, VI", 
                        x$region_name)
  data.frame(region = x$region, region_name = region_name, state_name = x$states)
})

head(regions,2)
```

Merge region to population. 
```{r}
population <- population |> left_join(regions, by = "state_name")
head(population)
```

```{r}
# Read-in other 3 CDC datasets here
get_cdc_data <- function(url, limit=1000000000){
  ret <- request(url) |>
    req_url_query("$limit"=limit) |>
    req_perform() |>
    resp_body_json(simplifyVector = TRUE)
  return(ret)
}
cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json")
hosp_raw <- get_cdc_data("https://data.cdc.gov/resource/39z2-9zu6.json")
deaths_raw <- get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json")
vax_raw <- get_cdc_data("https://data.cdc.gov/resource/rh2h-3yt2.json")

cases <- cases_raw |> mutate(cases = parse_number(new_cases),
                             date = as_date(ymd_hms(end_date))) |>
  filter(state %in% population$state) |>
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |>
  select(state, mmwr_year, mmwr_week, cases) |>
  arrange(state, mmwr_year, mmwr_week)

# Wrangle hosp
hosp <- hosp_raw |> filter(jurisdiction %in% population$state) |>
  filter(!is.na(new_covid_19_hospital)) |>
  rename(hosp = new_covid_19_hospital, state = jurisdiction) |>
  mutate(hosp = as.numeric(hosp),
         date = as_date(ymd_hms(collection_date))) |>
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |>
  select(mmwr_week, mmwr_year, hosp, state) |>
  group_by(state, mmwr_week, mmwr_year) |>
  summarize(hosp = sum(hosp), n = n(), .groups = "drop") |>
  filter(n == 7) |>
  select(-n) |>
  arrange(state, mmwr_year, mmwr_week)

# Wrangle deaths
deaths <- deaths_raw |> filter(state %in% population$state_name) |>
  rename(deaths = covid_19_deaths, state_name = state) |>
  filter(!is.na(deaths), group == 'By Week') |>
  mutate(state = case_when(
    state_name == "District of Columbia" ~ "DC",
    state_name == "Puerto Rico" ~ "PR",
    TRUE ~ state.abb[match(state_name, state.name)]
  )) |>
  mutate(deaths = as.numeric(deaths),
         date = as_date(ymd_hms(end_date))) |>
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |>
  select(mmwr_week, mmwr_year, deaths, state) |>
  filter(!is.na(deaths)) |>
  arrange(state, mmwr_year, mmwr_week)

# Wrangle vex
vax <- vax_raw |> filter(location %in% population$state) |>
  filter(!is.na(series_complete_cumulative), !is.na(booster_cumulative), date_type == "Admin") |>
  rename(state = location, series_complete = series_complete_cumulative, booster = booster_cumulative) |>
  mutate(series_complete = as.numeric(series_complete),
         booster = as.numeric(booster),
         date = as_date(ymd_hms(date)),
         mmwr_week = as.double(mmwr_week)) |>
  mutate(mmwr_year = epiyear(date)) |>
  select(mmwr_week, mmwr_year, series_complete, booster, state) |>
  group_by(state, mmwr_week, mmwr_year) |>
  summarize(series_complete = max(series_complete), booster = max(booster), .groups = "drop") |>
  arrange(state, mmwr_year, mmwr_week)
```

```{r}
all_dates <- data.frame(date = seq(make_date(2020, 1, 25),
                                   make_date(2023, 5, 04), 
                                   by = "week")) |>
  mutate(date = ceiling_date(date, unit = "week", week_start = 7) - days(1)) |>
  mutate(mmwr_year = epiyear(date), mmwr_week = epiweek(date)) 
population$year <- as.double(population$year)

dates_and_pop <- cross_join(all_dates, data.frame(state = unique(population$state))) |> left_join(population, by = c("state", "mmwr_year" = "year"))


# Join all tables
dat <- dates_and_pop|>    
  left_join(cases, by = c("state", "mmwr_week","mmwr_year")) |>
  left_join(hosp, by = c("state","mmwr_week","mmwr_year")) |>  
  left_join(deaths, by = c("state","mmwr_week","mmwr_year")) |>
  left_join(vax, by = c("state", "mmwr_week","mmwr_year")) |>
  arrange(state, mmwr_year, mmwr_week) 

save(dat, file = "WrangledData.rdata")
```

